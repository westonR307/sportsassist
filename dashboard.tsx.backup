import React from "react";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { FlipCard } from "@/components/ui/flip-card";
import { CampScheduleSummary } from "@/components/camp-schedule";
import {
  Plus,
  Settings,
  Users,
  BarChart3,
  Calendar,
  LogOut,
  Loader2,
  Menu,
  ShieldAlert,
  MapPin,
  Clock,
  DollarSign,
  Users2,
  CalendarRange,
  Tag,
  CalendarDays,
  Info,
  RefreshCw,
  Phone,
  Mail,
  FileText,
  Award,
  X,
  ClipboardList,
  Clipboard,
} from "lucide-react";
import { useLocation as useWouterLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { type Camp } from "@shared/schema";
import { AddCampDialog } from "@/components/add-camp-dialog";


// Organization interface
interface Organization {
  id: number;
  name: string;
  description: string | null;
  logoUrl?: string | null;
  stripeAccountId?: string | null;
  createdAt?: Date;
}

function DashboardLayout({ children }: { children: React.ReactNode }) {
  const [location, navigate] = useWouterLocation();
  const { user, logoutMutation } = useAuth();
  // Initialize sidebar closed by default (safer for mobile)
  const [sidebarOpen, setSidebarOpen] = React.useState(false);
  
  // Load organization data if the user has an organizationId
  const { data: organization } = useQuery<Organization>({
    queryKey: [`/api/organizations/${user?.organizationId}`],
    enabled: !!user?.organizationId,
  });
  
  // Set sidebar state based on screen size on initial load
  React.useEffect(() => {
    const isDesktop = window.innerWidth >= 1024; // 1024px is the lg breakpoint in Tailwind
    setSidebarOpen(isDesktop);
    
    // Also close sidebar when navigation happens (for mobile)
    const handleRouteChange = () => {
      if (window.innerWidth < 1024) {
        setSidebarOpen(false);
      }
    };
    
    // Listen for location changes
    window.addEventListener('popstate', handleRouteChange);
    
    return () => {
      window.removeEventListener('popstate', handleRouteChange);
    };
  }, []);
  const wouterLocation = useWouterLocation()[0];

  // Parent and athlete users don't have organizationId
  const isParentOrAthlete = user?.role === 'parent' || user?.role === 'athlete';
  
  // Only check for organizationId for non-parent/athlete roles
  if (!isParentOrAthlete && !user?.organizationId) return null;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile Menu Button - Hidden when sidebar is open */}
      <div className={`lg:hidden fixed top-0 left-0 m-4 z-50 transition-opacity duration-300 ${sidebarOpen ? 'opacity-0 pointer-events-none' : 'opacity-100'}`}>
        <Button
          variant="outline"
          size="icon"
          onClick={() => setSidebarOpen(!sidebarOpen)}
        >
          <Menu className="h-4 w-4" />
        </Button>
      </div>

      {/* Sidebar */}
      <div
        className={`
        fixed left-0 top-0 h-screen bg-white border-r 
        transition-all duration-300 ease-in-out z-40
        ${sidebarOpen ? "w-64" : "w-0 lg:w-16"} 
        lg:translate-x-0
        ${sidebarOpen ? "translate-x-0" : "-translate-x-full"}
        overflow-hidden
      `}
      >
        <div className="p-4 border-b whitespace-nowrap relative">
          <div className="flex justify-between items-center">
            <h2 className={`font-semibold text-lg ${!sidebarOpen && "lg:opacity-0"}`}>
              {organization?.name || "Sports Camp Manager"}
            </h2>
            {/* Close button for mobile */}
            <Button 
              variant="ghost" 
              size="icon"
              className="lg:hidden absolute right-2 top-3"
              onClick={() => setSidebarOpen(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
          {organization?.name && sidebarOpen && (
            <p className="text-xs text-muted-foreground mt-1 truncate">
              Sports Camp Management
            </p>
          )}
        </div>
        <nav className="p-4 space-y-2">
          <button
            onClick={() => {
              navigate("/dashboard");
              // Close sidebar on mobile after navigation
              if (window.innerWidth < 1024) setSidebarOpen(false);
            }}
            className={`flex w-full items-center gap-2 p-2 rounded-lg hover:bg-gray-100 whitespace-nowrap text-left ${
              wouterLocation === "/dashboard" ? "bg-gray-100" : ""
            }`}
          >
            <Calendar className="h-5 w-5 flex-shrink-0" />
            <span className={!sidebarOpen ? "lg:opacity-0" : ""}>Camps</span>
          </button>
          <button
            onClick={() => {
              navigate("/dashboard/reports");
              // Close sidebar on mobile after navigation
              if (window.innerWidth < 1024) setSidebarOpen(false);
            }}
            className={`flex w-full items-center gap-2 p-2 rounded-lg hover:bg-gray-100 whitespace-nowrap text-left ${
              wouterLocation === "/dashboard/reports" ? "bg-gray-100" : ""
            }`}
          >
            <BarChart3 className="h-5 w-5 flex-shrink-0" />
            <span className={!sidebarOpen ? "lg:opacity-0" : ""}>Reports</span>
          </button>
          <button
            onClick={() => {
              navigate("/dashboard/team");
              // Close sidebar on mobile after navigation
              if (window.innerWidth < 1024) setSidebarOpen(false);
            }}
            className={`flex w-full items-center gap-2 p-2 rounded-lg hover:bg-gray-100 whitespace-nowrap text-left ${
              wouterLocation === "/dashboard/team" ? "bg-gray-100" : ""
            }`}
          >
            <Users className="h-5 w-5 flex-shrink-0" />
            <span className={!sidebarOpen ? "lg:opacity-0" : ""}>Team</span>
          </button>
          <button
            onClick={() => {
              navigate("/dashboard/settings");
              // Close sidebar on mobile after navigation
              if (window.innerWidth < 1024) setSidebarOpen(false);
            }}
            className={`flex w-full items-center gap-2 p-2 rounded-lg hover:bg-gray-100 whitespace-nowrap text-left ${
              wouterLocation === "/dashboard/settings" ? "bg-gray-100" : ""
            }`}
          >
            <Settings className="h-5 w-5 flex-shrink-0" />
            <span className={!sidebarOpen ? "lg:opacity-0" : ""}>Settings</span>
          </button>
          
          {/* Custom Fields Link */}
          {user?.role === "camp_creator" || user?.role === "manager" ? (
            <button
              onClick={() => {
                navigate("/custom-fields");
                // Close sidebar on mobile after navigation
                if (window.innerWidth < 1024) setSidebarOpen(false);
              }}
              className={`flex w-full items-center gap-2 p-2 rounded-lg hover:bg-gray-100 whitespace-nowrap text-left ${
                wouterLocation === "/custom-fields" ? "bg-gray-100" : ""
              }`}
            >
              <FileText className="h-5 w-5 flex-shrink-0" />
              <span className={!sidebarOpen ? "lg:opacity-0" : ""}>Custom Fields</span>
            </button>
          ) : null}
          <Button
            variant="ghost"
            className="w-full justify-start whitespace-nowrap"
            onClick={() => {
              logoutMutation.mutate();
              // Close sidebar on mobile
              if (window.innerWidth < 1024) setSidebarOpen(false);
            }}
          >
            <LogOut className="h-5 w-5 mr-2 flex-shrink-0" />
            <span className={!sidebarOpen ? "lg:opacity-0" : ""}>Logout</span>
          </Button>
        </nav>
      </div>

      {/* Organization Logo in Top Center */}
      {organization?.logoUrl && (
        <div className="fixed top-0 left-0 right-0 z-30 flex justify-center items-center h-16 pointer-events-none">
          <div className="bg-white p-2 rounded-b-lg shadow-sm">
            <img 
              src={organization.logoUrl} 
              alt={`${organization.name} logo`} 
              className="h-10 max-w-[200px] object-contain" 
            />
          </div>
        </div>
      )}

      {/* Main Content */}
      <div
        className={`
        transition-all duration-300 ease-in-out
        ${sidebarOpen ? "lg:pl-64" : "lg:pl-16"}
        pt-16 lg:pt-0
      `}
      >
        <main className="container mx-auto px-6 py-8">{children}</main>
      </div>

      {/* Mobile Overlay */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
    </div>
  );
}

// Extended camp type to include permissions from the server
interface CampWithPermissions extends Camp {
  permissions?: {
    canManage: boolean;
  }
}

function CampsDashboard() {
  const [showAddCampDialog, setShowAddCampDialog] = React.useState(false);
  const { user } = useAuth();
  const { data: camps, isLoading } = useQuery<CampWithPermissions[]>({
    queryKey: ["/api/camps"],
    staleTime: 5000, // Only refetch after 5 seconds
    refetchOnMount: false, // Changed from "if-stale" to fix type issue
    refetchOnWindowFocus: false,
  });
  
  // Define the dashboard summary data type
  interface DashboardSummary {
    campCounts: {
      total: number;
      active: number;
      upcoming: number;
      completed: number;
      registrationOpen: number;
    };
    todaySessions: Array<{
      id: number;
      campId: number;
      campName: string;
      sessionDate: string;
      startTime: string;
      endTime: string;
      status: string;
    }>;
    totalRegistrations: number;
    recentRegistrations: number;
    sessionsByDate: Record<string, { 
      campIds: number[]; 
      sessionCount: number;
    }>;
  }

  // Fetch the dashboard summary data for the calendar and stats cards
  const { data: dashboardSummary, isLoading: isDashboardLoading } = useQuery<DashboardSummary>({
    queryKey: [`/api/organizations/${user?.organizationId}/dashboard-summary`],
    staleTime: 60000, // Cache for 1 minute
    refetchOnMount: false, // Changed from "if-stale" to fix type issue
    refetchOnWindowFocus: false,
    // Only fetch if user is logged in and has an organization
    enabled: !!user && !!user.organizationId,
  });
  
  const [location, navigate] = useWouterLocation();
  
  // Check if user is a camp creator or manager who can create camps
  const canCreateCamps = user && ['camp_creator', 'manager'].includes(user.role);
  
  // Date selection state for the calendar
  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(undefined);
  
  // Get the current month's days for the calendar view
  const today = new Date();
  const [currentMonth, setCurrentMonth] = React.useState(today.getMonth());
  const [currentYear, setCurrentYear] = React.useState(today.getFullYear());

  // Create an array of dates for the current month (to show the calendar)
  const getDaysInMonth = (year: number, month: number) => {
    const date = new Date(year, month, 1);
    const days = [];
    
    // Add empty slots for the days before the 1st of the month
    const firstDay = new Date(year, month, 1).getDay();
    for (let i = 0; i < firstDay; i++) {
      days.push(null);
    }
    
    // Add all days in the month
    while (date.getMonth() === month) {
      days.push(new Date(date));
      date.setDate(date.getDate() + 1);
    }
    
    return days;
  };
  
  const daysInMonth = getDaysInMonth(currentYear, currentMonth);
  
  // Format date as YYYY-MM-DD
  const formatDateKey = (date: Date) => {
    return date.toISOString().split('T')[0];
  };
  
  // Navigate to previous month
  const prevMonth = () => {
    if (currentMonth === 0) {
      setCurrentMonth(11);
      setCurrentYear(currentYear - 1);
    } else {
      setCurrentMonth(currentMonth - 1);
    }
  };
  
  // Navigate to next month
  const nextMonth = () => {
    if (currentMonth === 11) {
      setCurrentMonth(0);
      setCurrentYear(currentYear + 1);
    } else {
      setCurrentMonth(currentMonth + 1);
    }
  };
  
  // Get month name
  const monthNames = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];

  // Format time to 12-hour format (e.g., "09:00:00" to "9:00 AM")
  const formatTimeFor12Hour = (timeStr: string): string => {
    try {
      const timePart = timeStr.split(':');
      const hoursNum = parseInt(timePart[0], 10);
      const suffix = hoursNum >= 12 ? "PM" : "AM";
      const hours12 = hoursNum % 12 === 0 ? 12 : hoursNum % 12;
      return `${hours12}:${timePart[1]} ${suffix}`;
    } catch (e) {
      return timeStr;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Dashboard</h1>
        {canCreateCamps ? (
          <Button onClick={() => setShowAddCampDialog(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Create Camp
          </Button>
        ) : (
          <div className="flex items-center text-muted-foreground text-sm">
            <ShieldAlert className="h-4 w-4 mr-2" />
            <span>View only mode</span>
          </div>
        )}
      </div>
      
      {isLoading || isDashboardLoading ? (
        <div className="flex justify-center p-8">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : !camps || camps.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-8">
            <p className="text-gray-500 mb-4">No camps {canCreateCamps ? 'created yet' : 'available'}</p>
            {canCreateCamps ? (
              <Button onClick={() => setShowAddCampDialog(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Create your first camp
              </Button>
            ) : (
              <div className="text-sm text-muted-foreground max-w-md text-center">
                <p>You don't have permission to create camps.</p>
                <p className="mt-2">Contact an organization admin if you need to create a new camp.</p>
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-6">
          {/* Summary Cards Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* Today's Sessions Card */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <CalendarDays className="h-5 w-5 text-primary" />
                  Today's Sessions
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">
                  {dashboardSummary?.todaySessions?.length || 0}
                </div>
                <div className="text-sm text-muted-foreground mt-1">
                  Sessions scheduled for today
                </div>
                
                {dashboardSummary?.todaySessions?.length > 0 && (
                  <div className="mt-3 space-y-2 max-h-32 overflow-y-auto pr-2">
                    {dashboardSummary.todaySessions.map((session: any, index: number) => (
                      <div key={index} className="text-xs flex justify-between border-b pb-1">
                        <div className="font-medium">{session.campName}</div>
                        <div>{formatTimeFor12Hour(session.startTime)}</div>
                      </div>
                    ))}
                  </div>
                )}
                
                <Button 
                  variant="link" 
                  className="text-xs p-0 h-auto mt-2" 
                  onClick={() => navigate("/dashboard/schedule")}
                >
                  View schedule
                </Button>
              </CardContent>
            </Card>
            
            {/* Upcoming Camps Card */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <CalendarRange className="h-5 w-5 text-primary" />
                  Upcoming Camps
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">
                  {dashboardSummary?.campCounts?.upcoming || 0}
                </div>
                <div className="grid grid-cols-2 gap-x-4 gap-y-1 mt-1 text-sm">
                  <div className="flex items-center gap-1">
                    <Badge className="h-2 w-2 rounded-full bg-green-500 p-0" />
                    <span className="text-muted-foreground">Active: {dashboardSummary?.campCounts?.active || 0}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Badge className="h-2 w-2 rounded-full bg-blue-500 p-0" />
                    <span className="text-muted-foreground">Registration: {dashboardSummary?.campCounts?.registrationOpen || 0}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Badge className="h-2 w-2 rounded-full bg-amber-500 p-0" />
                    <span className="text-muted-foreground">Upcoming: {dashboardSummary?.campCounts?.upcoming || 0}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Badge className="h-2 w-2 rounded-full bg-gray-300 p-0" />
                    <span className="text-muted-foreground">Completed: {dashboardSummary?.campCounts?.completed || 0}</span>
                  </div>
                </div>
                
                <Button 
                  variant="link" 
                  className="text-xs p-0 h-auto mt-2" 
                  onClick={() => navigate("/dashboard")}
                >
                  View all camps
                </Button>
              </CardContent>
            </Card>
            
            {/* Participants Card */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <Users2 className="h-5 w-5 text-primary" />
                  Participants
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">
                  {dashboardSummary?.totalRegistrations || 0}
                </div>
                <div className="text-sm text-muted-foreground mt-1">
                  Total registrations across all camps
                </div>
                
                <Button 
                  variant="link" 
                  className="text-xs p-0 h-auto mt-2" 
                  onClick={() => navigate("/dashboard/participants")}
                >
                  Manage participants
                </Button>
              </CardContent>
            </Card>
            
            {/* New Registrations Card */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <Award className="h-5 w-5 text-primary" />
                  New Signups
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">
                  {dashboardSummary?.recentRegistrations || 0}
                </div>
                <div className="text-sm text-muted-foreground mt-1">
                  New registrations in the past 48 hours
                </div>
                
                <Button 
                  variant="link" 
                  className="text-xs p-0 h-auto mt-2" 
                  onClick={() => navigate("/dashboard/registrations")}
                >
                  View registrations
                </Button>
              </CardContent>
            </Card>
          </div>
          
          {/* Calendar View */}
          <Card>
            <CardHeader className="pb-2">
              <div className="flex justify-between items-center">
                <CardTitle>Camp Calendar</CardTitle>
                <div className="flex items-center space-x-2">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="h-8 w-8 p-0" 
                    onClick={prevMonth}
                  >
                    <X className="h-4 w-4 rotate-45" />
                  </Button>
                  <span className="font-medium">
                    {monthNames[currentMonth]} {currentYear}
                  </span>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="h-8 w-8 p-0" 
                    onClick={nextMonth}
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {/* Days of week header */}
              <div className="grid grid-cols-7 text-center font-medium mb-2">
                <div>Sun</div>
                <div>Mon</div>
                <div>Tue</div>
                <div>Wed</div>
                <div>Thu</div>
                <div>Fri</div>
                <div>Sat</div>
              </div>
              
              {/* Calendar grid */}
              <div className="grid grid-cols-7 gap-1">
                {daysInMonth.map((day, index) => {
                  if (day === null) {
                    // Empty cell for days before the 1st of the month
                    return <div key={`empty-${index}`} className="aspect-square p-1"></div>;
                  }
                  
                  const dateKey = formatDateKey(day);
                  const isToday = day.toDateString() === today.toDateString();
                  const hasSession = dashboardSummary?.sessionsByDate && dashboardSummary.sessionsByDate[dateKey];
                  const sessionData = hasSession ? dashboardSummary.sessionsByDate[dateKey] : null;
                  const campCount = sessionData ? sessionData.campIds.length : 0;
                  
                  return (
                    <div 
                      key={dateKey}
                      className={`aspect-square p-1 flex flex-col items-center border rounded-md relative
                        ${isToday ? 'border-primary' : 'border-transparent hover:border-gray-200'} 
                        ${hasSession ? 'cursor-pointer hover:bg-gray-50' : ''}
                      `}
                      onClick={() => hasSession && setSelectedDate(day)}
                    >
                      <div className={`h-6 w-6 flex items-center justify-center rounded-full text-sm
                        ${isToday ? 'bg-primary text-primary-foreground font-medium' : ''}
                      `}>
                        {day.getDate()}
                      </div>
                      
                      {/* Show little dots for each unique camp that has a session this day */}
                      {campCount > 0 && (
                        <div className="mt-1 flex justify-center gap-1">
                          {[...Array(Math.min(campCount, 3))].map((_, i) => (
                            <div 
                              key={`dot-${i}`} 
                              className="h-1.5 w-1.5 rounded-full bg-primary"
                            ></div>
                          ))}
                          {campCount > 3 && (
                            <div className="text-xs text-muted-foreground mt-[-2px]">+{campCount - 3}</div>
                          )}
                        </div>
                      )}
                      
                      {/* Show session count */}
                      {hasSession && (
                        <div className="absolute bottom-1 right-1 text-[8px] text-muted-foreground">
                          {sessionData.sessionCount}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
              
              {/* Selected date session details */}
              {selectedDate && dashboardSummary?.sessionsByDate && dashboardSummary.sessionsByDate[formatDateKey(selectedDate)] && (
                <div className="mt-4 border-t pt-3">
                  <div className="flex justify-between items-center mb-2">
                    <h3 className="font-medium">Sessions on {selectedDate.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}</h3>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="h-8 w-8 p-0" 
                      onClick={() => setSelectedDate(undefined)}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                  
                  <div className="space-y-1 max-h-40 overflow-y-auto">
                    {camps
                      .filter(camp => dashboardSummary.sessionsByDate[formatDateKey(selectedDate)].campIds.includes(camp.id))
                      .map(camp => (
                        <div key={camp.id} className="flex justify-between text-sm py-1 border-b">
                          <div className="font-medium">{camp.name}</div>
                          <Badge 
                            variant="outline"
                            className="text-xs"
                          >
                            {dashboardSummary.sessionsByDate[formatDateKey(selectedDate)].sessionCount} sessions
                          </Badge>
                        </div>
                      ))
                    }
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
          
          {/* Camp Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          {camps.map((camp) => {
            // Check if user can manage this specific camp
            const canManageCamp = camp.permissions?.canManage || false;
            
            // Calculate date ranges and format for better display
            const now = new Date();
            const startDate = new Date(camp.startDate);
            const endDate = new Date(camp.endDate);
            const regStartDate = new Date(camp.registrationStartDate);
            const regEndDate = new Date(camp.registrationEndDate);
            
            // Calculate if registration is open, upcoming, or past
            const regStatus = now < regStartDate 
              ? "upcoming" 
              : now > regEndDate 
                ? "closed" 
                : "open";
                
            // Calculate if camp is active, upcoming, or past
            const campStatus = now < startDate 
              ? "upcoming" 
              : now > endDate 
                ? "completed" 
                : "active";
                
            // Format duration in days
            const campDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
            
            // Format a more user-friendly display of the camp type
            const formatCampType = (type: string) => {
              const types: Record<string, string> = {
                'one_on_one': 'One-on-One',
                'group': 'Group',
                'team': 'Team',
                'virtual': 'Virtual'
              };
              return types[type] || type;
            };
           
            // We'll create two cards - one for the front and one for the back of the flip card
            const frontCard = (
              <Card className="h-full border-0 shadow-none">
                <div className={`h-2 w-full ${campStatus === 'active' ? 'bg-green-500' : campStatus === 'upcoming' ? 'bg-blue-500' : 'bg-gray-400'}`} />
                
                <CardHeader className="p-3 pb-1">
                  <div className="space-y-1">
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-base truncate">{camp.name}</CardTitle>
                      {canManageCamp ? (
                        <Badge className="h-5 text-xs bg-green-100 text-green-800 hover:bg-green-200">
                          Manager
                        </Badge>
                      ) : null}
                    </div>
                    <CardDescription className="line-clamp-1 text-xs">
                      {camp.description}
                    </CardDescription>
                  </div>
                </CardHeader>
                
                <CardContent className="p-3 pt-0 space-y-2 text-xs">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-1">
                      <CalendarRange className="h-3.5 w-3.5 text-muted-foreground" />
                      <span>{campDays} day{campDays !== 1 ? 's' : ''}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Users2 className="h-3.5 w-3.5 text-muted-foreground" />
                      <span>{camp.capacity}</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-1">
                    <MapPin className="h-3.5 w-3.5 text-muted-foreground shrink-0" />
                    <span className="truncate">{camp.city}, {camp.state}</span>
                  </div>
                  
                  <div className="flex items-center gap-1">
                    <CalendarDays className="h-3.5 w-3.5 text-muted-foreground shrink-0" />
                    <span className="truncate text-muted-foreground">Click card to see schedule</span>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <Badge 
                      className={
                        regStatus === 'open'
                          ? 'bg-green-100 text-green-800 hover:bg-green-200 h-5 text-xs'
                          : regStatus === 'upcoming'
                            ? 'bg-blue-100 text-blue-800 hover:bg-blue-200 h-5 text-xs'
                            : 'bg-gray-100 text-gray-800 hover:bg-gray-200 h-5 text-xs'
                      }
                    >
                      {regStatus === 'open' ? 'Registration Open' : regStatus === 'upcoming' ? 'Opening Soon' : 'Closed'}
                    </Badge>
                    <span className="text-xs">${camp.price}</span>
                  </div>
                </CardContent>
                
                <div className="absolute bottom-2 right-2 text-muted-foreground text-xs">
                  <RefreshCw className="h-3.5 w-3.5 animate-pulse" />
                </div>
              </Card>
            );
            
            const backCard = (
              <Card className="h-full border-0 shadow-none overflow-y-auto">
                <div className={`h-2 w-full ${campStatus === 'active' ? 'bg-green-500' : campStatus === 'upcoming' ? 'bg-blue-500' : 'bg-gray-400'}`} />
                
                <CardHeader className="p-3 pb-1">
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-base">{camp.name}</CardTitle>
                    <Badge 
                      variant={camp.visibility === 'public' ? 'default' : 'outline'}
                      className="capitalize h-5 text-xs"
                    >
                      {camp.visibility}
                    </Badge>
                  </div>
                </CardHeader>
                
                <CardContent className="p-3 text-xs space-y-3">
                  <p className="text-muted-foreground">{camp.description}</p>
                  
                  <div className="space-y-1.5">
                    <div className="flex items-center gap-1.5 font-medium">
                      <CalendarDays className="h-3.5 w-3.5 text-muted-foreground" />
                      <span>Camp Period</span>
                    </div>
                    <div className="ml-5 flex justify-between">
                      <span>{startDate.toLocaleDateString()}</span>
                      <span>to</span>
                      <span>{endDate.toLocaleDateString()}</span>
                    </div>
                  </div>
                  
                  <div className="space-y-1.5">
                    <div className="flex items-center gap-1.5 font-medium">
                      <Clock className="h-3.5 w-3.5 text-muted-foreground" />
                      <span>Registration</span>
                    </div>
                    <div className="ml-5 flex justify-between">
                      <span>{regStartDate.toLocaleDateString()}</span>
                      <span>to</span>
                      <span>{regEndDate.toLocaleDateString()}</span>
                    </div>
                  </div>
                  
                  {/* Camp Schedule Summary */}
                  <div className="space-y-1.5">
                    <div className="flex items-center gap-1.5 font-medium">
                      <CalendarDays className="h-3.5 w-3.5 text-muted-foreground" />
                      <span>Schedule</span>
                    </div>
                    <div className="ml-5 text-xs">
                      <div className="flex items-center gap-2">
                        {/* Using our newly enhanced component - we don't have enhanced schedule data here, so it falls back to default */}
                        <CampScheduleSummary 
                          schedules={camp.schedules || []} 
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2">
                    <div className="space-y-1">
                      <div className="flex items-center gap-1.5">
                        <MapPin className="h-3.5 w-3.5 text-muted-foreground" />
                        <span className="font-medium">Location</span>
                      </div>
                      <div className="ml-5 text-muted-foreground">
                        <div>{camp.streetAddress}</div>
                        <div>{camp.city}, {camp.state} {camp.zipCode}</div>
                      </div>
                    </div>
                    
                    <div className="space-y-1">
                      <div className="flex items-center gap-1.5">
                        <Tag className="h-3.5 w-3.5 text-muted-foreground" />
                        <span className="font-medium">Details</span>
                      </div>
                      <div className="ml-5 space-y-0.5 text-muted-foreground">
                        <div className="flex justify-between">
                          <span>Type:</span>
                          <span>{formatCampType(camp.type)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Ages:</span>
                          <span>{camp.minAge}-{camp.maxAge}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span>${camp.price}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
                
                <CardFooter className="p-3 pt-0 flex justify-center">
                  <Button 
                    size="sm" 
                    variant="outline"
                    className="w-full text-xs h-8"
                    onClick={(e) => {
                      e.stopPropagation();
                      navigate(`/dashboard/camps/${camp.id}`);
                    }}
                  >
                    View Details
                  </Button>
                </CardFooter>
              </Card>
            );
            
            // Return the FlipCard component with front and back cards
            return (
              <div key={camp.id} className="h-[220px]">
                <FlipCard
                  front={frontCard}
                  back={backCard}
                  className={`rounded-md overflow-hidden transition-all duration-200 h-full ${!canManageCamp ? "opacity-90" : ""}`}
                />
              </div>
            );
          })}
        </div>
      )}

      {showAddCampDialog && (
        <AddCampDialog
          open={showAddCampDialog}
          onOpenChange={setShowAddCampDialog}
        />
      )}
    </div>
  );
}

function Dashboard() {
  const { user } = useAuth();

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <Card className="w-[300px]">
          <CardHeader>
            <CardTitle>Loading...</CardTitle>
          </CardHeader>
        </Card>
      </div>
    );
  }

  // All user types can see the dashboard, with appropriate permissions
  return (
    <DashboardLayout>
      <CampsDashboard />
    </DashboardLayout>
  );
}

export { DashboardLayout };
export default Dashboard;
